@@ -1,12 +1,9 @@
from django.shortcuts import render	
from django.contrib.auth.decorators import login_required	
from django.shortcuts import render, redirect	from django.shortcuts import render, redirect
from .models import Member, Document, Ajax, CsvUpload	from .models import Member, Document, Ajax, CsvUpload
import datetime	import datetime
from django.contrib import messages	from django.contrib import messages
from django.core.files.storage import FileSystemStorage	from django.core.files.storage import FileSystemStorage
from django.http import JsonResponse	from django.http import JsonResponse
from django.contrib.auth import authenticate, login, logout	
from django.contrib.auth.decorators import login_required	from django.contrib.auth.decorators import login_required
from crud.forms import *	from crud.forms import *
from django.views.decorators.csrf import csrf_protect	from django.views.decorators.csrf import csrf_protect
@@ -15,7 +12,6 @@
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger	from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger





# Create your views here.	# Create your views here.
@login_required	@login_required
def index(request):	def index(request):
@@ -157,17 +153,24 @@ def ajax_delete(request):
def register(request):	def register(request):
    if request.method == 'POST':	    if request.method == 'POST':
        form = RegistrationForm(request.POST)	        form = RegistrationForm(request.POST)
        import pdb;pdb.set_trace()
        if form.is_valid():	        if form.is_valid():
            user = User.objects.create_user(	            users = User(
                username=form.cleaned_data['username'],	                username=form.cleaned_data['username'],
                password=form.cleaned_data['password1'],	                password=form.cleaned_data['password1'],
                is_staff=True,	                is_staff=True,
                is_active=True,	                is_active=True,
                is_superuser=True,	                is_superuser=True,
                email=form.cleaned_data['email'],	                email=form.cleaned_data['email'],
                first_name=form.cleaned_data['first_name'],	                first_name=form.cleaned_data['first_name'],
                last_name=form.cleaned_data['last_name']	                last_name=form.cleaned_data['last_name'],
            )	            )
            try:
                users.full_clean()
            except ValidationError as e:
                pass
            users.save()
            messages.success(request, 'Member was created successfully!')
            return HttpResponseRedirect('/register/success/')	            return HttpResponseRedirect('/register/success/')
    else:	    else:
        form = RegistrationForm()	        form = RegistrationForm()
@@ -193,7 +196,7 @@ def users(request):
def user_delete(request, id):	def user_delete(request, id):
    user = User.objects.get(id=id)	    user = User.objects.get(id=id)
    user.delete()	    user.delete()
    messages.error(request, 'User was deleted successfully!')	    messages.warning(request, 'User was deleted successfully!')
    return redirect('/users')	    return redirect('/users')


@login_required	@login_required
@@ -216,15 +219,15 @@ def upload_csv(request):
        csv_file = request.FILES["csv_file"]	        csv_file = request.FILES["csv_file"]


        if len(csv_file) == 0:	        if len(csv_file) == 0:
            messages.error(request, 'Empty File')	            messages.warning(request, 'Empty File')
            return render(request, 'upload_csv.html')	            return render(request, 'upload_csv.html')


        if not csv_file.name.endswith('.csv'):	        if not csv_file.name.endswith('.csv'):
            messages.error(request, 'File is not CSV type')	            messages.warning(request, 'File is not CSV type')
            return render(request, 'upload_csv.html')	            return render(request, 'upload_csv.html')


        if csv_file.multiple_chunks():	        if csv_file.multiple_chunks():
            messages.error(request, 'Uploaded file is too big (%.2f MB).' % (csv_file.size / (1000 * 1000),))	            messages.warning(request, 'Uploaded file is too big (%.2f MB).' % (csv_file.size / (1000 * 1000),))
            return render(request, 'upload_csv.html')	            return render(request, 'upload_csv.html')


        file_data = csv_file.read().decode("utf-8")	        file_data = csv_file.read().decode("utf-8")
@@ -237,7 +240,7 @@ def upload_csv(request):
                        fields[3] == 'notes'):	                        fields[3] == 'notes'):
                    pass	                    pass
                else:	                else:
                    messages.error(request, 'File is not Correct Headers')	                    messages.warning(request, 'File is not Correct Headers')
                    return render(request, 'upload_csv.html')	                    return render(request, 'upload_csv.html')
                    break	                    break
            else:	            else:
@@ -254,7 +257,7 @@ def upload_csv(request):
        return redirect('/upload/csv/')	        return redirect('/upload/csv/')


    except Exception as e:	    except Exception as e:
        messages.error(request, "Unable to upload file. " + e)	        messages.warning(request, "Unable to upload file. " + e)
        return redirect('/upload/csv/')	        return redirect('/upload/csv/')




